module TML;
import * from ABS.DC;

interface Worker {
	Bool process(Rat taskCost, Time started, Duration deadline);
}

class WorkerObject() implements Worker {
    Bool process(Rat taskCost, Time started, Duration deadline) {
		[Cost: taskCost] skip;
		Duration remainingTime = subtractFromDuration(deadline, timeDifference(now(),started));
		await duration(max(0, taskCost-10), taskCost+10);
		await duration(10, 80);
		Bool success = True;
		return success;
    }
}

interface LoadBalancer {
    Unit addWorker(Shop s);
    Shop getWorker();
    Unit releaseWorker(Shop s);
    Shop firingWorker();
    Int getNbrAvailableW();
    Int getNbrInuseW();
}

class RoundRobinLoadBalancer() implements LoadBalancer {
    List<Shop> available = Nil; 
  	List<Shop> inuse = Nil;
  
    Unit addWorker(Shop s){
    	available = appendright(available,s);
    }
  
    Shop getWorker(){
        await (available != Nil);
        Shop s = head(available); available = tail(available); inuse = appendright(inuse,s);
        return s;
    }
  
    Unit releaseWorker(Shop s){
    	available = appendright(available,s); inuse = without(inuse,s);
    }
  
    Shop firingWorker(){
        await (available != Nil);
        Shop s = head(reverse(available)); available = without(available,s);
        return s;
    }
  
  	Int getNbrAvailableW(){
    	return length(available);
    }	
  
  	Int getNbrInuseW(){
    	return length(inuse);
    }

}

interface User {
    Bool register();
  	Bool authenticate();
  	Bool tickets();
	String getName();
	String getEmail();
  	String getCCtype();
}

class User(String name, Int age, String cctype, String email, Keyvault k) implements User {
    Bool register() {
      await duration(10, 99/2);
      println("Registered " + name);
      return True;
    }
  
  	Bool authenticate(){
      await duration(10, 59/2);
      return True;
    }
  
  	Bool tickets(){
      await duration(30, 99/2);
      println("Printing tickets");
      return True;
    }
	
	String getName() {
      	k.encrypt();
		return name;
	}
	
	String getEmail() {
      	k.encrypt();
		return email;
	}
  
  	String getCCtype() {
      	k.encrypt();
		return cctype;
	}
	
}

interface Shop {
	Bool buyTickets(Int amount, User u, String date1, String date2);
}

class Shop(Bank b, Keyvault k, Tickets t, Duration responseTime) implements Shop {
	Bool buyTickets(Int amount, User u, String date1, String date2){
      	Bool status = True;
    	if (amount>4){
          	println("Too many tickets ordered, abort");
        	status = False;
        }
		Bool ticket_status = t.checkAvailable(date1, date2, amount);
      	if (ticket_status){
          	String cctype = await u!getCCtype();
			Bool temp = k.decrypt();
          	Bool payment = await b!process(42, cctype);
          	if (!payment){
            	status = False;
				t!releaseTickets(date1, date2, amount);
            }
          	else{
            	println("Tickets have been successfully booked");
            }
        }
      	else{
			status = False;
		}
      	return status;
    }
}

interface Bank {
	Bool process(Int price, String cctype);
}

class Bank(Keyvault k) implements Bank {
	Bool process(Int price, String cctype){
      	Bool status = True;
    	if (cctype == "visa"){
        	await duration(20, 80);
        }
      	else if (cctype == "maestro"){
        	await duration(50, 150);
        }
      	else if (cctype == "mastercard"){
        	await duration(10, 60);
        }
      	return status;
    }
  
}

interface Keyvault {
	Bool encrypt();
	Bool decrypt();
}

class Keyvault() implements Keyvault {
	Bool encrypt(){
    	await duration(40, 50);
      	return True;
    }
	Bool decrypt(){
    	await duration(40, 50);
      	return True;
    }
}

interface Tickets {
	Bool checkAvailable(String date1, String date2, Int amount);
  	Bool releaseTickets(String date1, String date2, Int amount);
  	Bool addTickets(String date1, String date2, Int amount);
}

class Tickets() implements Tickets{
  	Map<Pair<String, String>, Int> tickets = map[];
  
	Bool checkAvailable(String date1, String date2, Int amount){
      	Bool status = True;
    	Pair<String, String> period = Pair(date1, date2);
      	Int available = lookupDefault(tickets, period, 0);
        if (amount >= available) {
          status = False;
        }
        else{
          Int temp = available;
          available = temp-amount;
          tickets = put(tickets, period, available);
          status = True;
        }
      	return status;
    }
  
  	Bool releaseTickets(String date1, String date2, Int amount){
    	Pair<String, String> period = Pair(date1, date2);
      	Int available = lookupDefault(tickets, period, 0);
        Int temp = available;
        available = temp+amount;
        tickets = put(tickets, period, available);
      	return True;
    }
  
  	Bool addTickets(String date1, String date2, Int amount){
    	Pair<String, String> period = Pair(date1, date2);
      	Pair<Pair<String, String>, Int> p = Pair(period, amount);
      	tickets = insert(tickets, p);
      	return True;
    }
}

{
  	CloudProvider p = new CloudProvider("TML");
  	await p!setInstanceDescriptions(
        map[Pair("T2_MICRO", map[Pair(Memory,1), Pair(Speed,1)]),
            Pair("T2_SMALL", map[Pair(Memory,2), Pair(Speed,1)]),
            Pair("T2_MEDIUM", map[Pair(Memory,4), Pair(Speed,2)]),
            Pair("M4_LARGE", map[Pair(Memory,8), Pair(Speed,2)])]);
  
  	//DC  server1 = await p!launchInstanceNamed("T2_SMALL");
	DC  server2 = await p!launchInstanceNamed("T2_SMALL");
	DC  server3 = await p!launchInstanceNamed("T2_SMALL");
	DC  server4 = await p!launchInstanceNamed("M4_LARGE");
    DC  server5 = await p!launchInstanceNamed("M4_LARGE");
  	DC  server6 = await p!launchInstanceNamed("M4_LARGE");
  	DC  server7 = await p!launchInstanceNamed("M4_LARGE");
  	DC  server8 = await p!launchInstanceNamed("M4_LARGE");
  	DC  server9 = await p!launchInstanceNamed("M4_LARGE");
  	DC  server10 = await p!launchInstanceNamed("M4_LARGE");
  	DC  server11 = await p!launchInstanceNamed("M4_LARGE");
  	DC  server12 = await p!launchInstanceNamed("M4_LARGE");
  
  	[DC: server7] Keyvault kv = new Keyvault();
  	[DC: server5] Bank bank = new Bank(kv);
	[DC: server8] LoadBalancer lb = new RoundRobinLoadBalancer();
	[DC: server10] Tickets t = new Tickets();
	t!addTickets("01-07-2020", "03-07-2020", 100000);
	[DC: server6] Shop shop = new Shop(bank, kv, t, Duration(1000));
  	[DC: server9] Shop shop2 = new Shop(bank, kv, t, Duration(1000));
  	[DC: server11] Shop shop3 = new Shop(bank, kv, t, Duration(1000));
  	[DC: server12] Shop shop4 = new Shop(bank, kv, t, Duration(1000));
  
  	lb.addWorker(shop);
  	lb.addWorker(shop2);
  	lb.addWorker(shop3);
  	lb.addWorker(shop4);
	
	Int nrJobs = 1000;
	while(nrJobs>0){
		Shop s = lb.getWorker();
		User u = new User(toString(nrJobs), 22, "visa", "email", kv);
		await u!register();
		s.buyTickets(4, u, "01-07-2020", "03-07-2020");
		lb.releaseWorker(s);
		nrJobs = nrJobs - 1;
	}
      
  	println("DONE");
}
